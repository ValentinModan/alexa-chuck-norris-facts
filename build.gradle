plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "application"
    id "jp.classmethod.aws.lambda" version "0.38"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.20"
    id "net.ltgt.apt-idea" version "0.20"
}

group = 'chuck-norris-facts'
version = '1.0'

repositories {
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.0.M2'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut.aws:micronaut-function-aws-alexa"

    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

aws {
    region = 'eu-west-1'
}

if (new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "alexa-chuck-norris-facts"
        handler = "io.micronaut.function.aws.alexa.AlexaFunction"
        role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 512
        timeout = 60
    }
}

shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
